# Default values for nginx.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

global:
  namespace: development

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: eswarmaganti/portfolio
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "4"

# This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "docker-service-account"
  imagePullSecrets: dockerhub-secret

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
# fsGroup: 2000

securityContext:
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: NodePort
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 443
  targetPort: 443

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: true
  className: nginx
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
  hosts:
    - host: portfolio.eswarmaganti.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls:
    - secretName: nginx-tls-secret
      hosts:
        - portfolio.eswarmaganti.local

# We usually recommend not to specify default resources and to leave this as a conscious
# choice for the user. This also increases chances charts run on environments with little
# resources, such as Minikube. If you do want to specify resources, uncomment the following
# lines, adjust them as necessary, and remove the curly braces after 'resources:'.
resources:
  limits:
    cpu: 300m
    memory: 256Mi
  requests:
    cpu: 200m
    memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: 443
    scheme: HTTPS
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5

readinessProbe:
  httpGet:
    path: /
    port: 443
    scheme: HTTPS
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes:
  - name: nginx-tls-volume
    secret:
      secretName: nginx-tls-secret
      optional: false
  - name: nginx-cache
    emptyDir: {}
  - name: var-run
    emptyDir: {}

# Additional volumeMounts on the output Deployment definition.
volumeMounts:
  - name: nginx-tls-volume
    mountPath: "/etc/nginx/ssl"
    readOnly: true
  - name: nginx-cache
    mountPath: "/var/cache/nginx"
  - name: var-run
    mountPath: "/var/run"

nodeSelector: {}

tolerations: []

affinity: {}


# values for self-signed tls certificate
cert:
  name: nginx-tls-cert
  dnsNames: portfolio.eswarmaganti.local
  secretName: nginx-tls-secret
  issuerRef:
    kind: ClusterIssuer
    name: self-signed-cert-issuer


# values for secret
secret:
  name: dockerhub-secret
  type: kubernetes.io/dockerconfigjson
  dockerConfigJSON: eyJhdXRocyI6eyJodHRwczovL2luZGV4LmRvY2tlci5pby92MS8iOnsidXNlcm5hbWUiOiJlc3dhcm1hZ2FudGkiLCJwYXNzd29yZCI6ImhpbmZ1dC1oZWRxYXMtNEdhdnRlIiwiZW1haWwiOiJtYWdhbnRpLmVrQGdtYWlsLmNvbSIsImF1dGgiOiJaWE4zWVhKdFlXZGhiblJwT21ocGJtWjFkQzFvWldSeFlYTXRORWRoZG5SbCJ9fX0=